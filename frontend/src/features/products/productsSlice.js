import { createAsyncThunk, createSlice } from "@reduxjs/toolkit";
import { destroyProduct, getProducts } from "./productsAPI";
import Jsona from 'jsona';
const dataFormatter = new Jsona();

const initialState = {
  products: [],
  filters: {},
  selectedProductId: null,
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const getProductsAsync = createAsyncThunk(
  "get/products",
  async (filters) => {
    const response = await getProducts(filters);
    return response.data;
  }
);

export const destroyProductAsync = createAsyncThunk(
  "destroy/products",
  async (selectedProductId) => {
    console.log(`destroying product with id: ${selectedProductId}`)
    const response = await destroyProduct(selectedProductId);
    return response.data;
  }
);

export const productsSlice = createSlice({
  name: "products",
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    removeProductById: (state, action) => {
      state.products = state.products.filter(product => product.id !== action.payload)
    },
    setSelectedProduct: (state, action) => {
      state.selectedProductId = action.payload
    }
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(getProductsAsync.pending, (state) => {
        state.status = "loading";
      })
      .addCase(getProductsAsync.fulfilled, (state, action) => {
        state.status = "idle";
        state.products = dataFormatter.deserialize(action.payload);
      })
      .addCase(getProductsAsync.rejected, (state) => {
        state.status = "failed";
      })
      .addCase(destroyProductAsync.pending, (state) => {
        state.status = "loading";
      })
  },
});

export const { products, setSelectedProduct, removeProductById } = productsSlice.actions;

export const selectProducts = (state) => state.products.products;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
// export const selectEmail = (state) => state.email;
// export const selectPassword = (state) => state.password;

// We can also write thunks by hand, which may contain both sync and async logic.
// Here's an example of conditionally dispatching actions based on current state.
// export const incrementIfOdd = (amount) => (dispatch, getState) => {
//   const currentValue = selectCount(getState());
//   if (currentValue % 2 === 1) {
//     dispatch(incrementByAmount(amount));
//   }
// };

export default productsSlice.reducer;
