import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';
import { signIn } from './loginAPI';

const initialState = {
  email: '',
  password: '',
  accessToken: '',
  uid: '',
  client: '',
  isLoggedIn: false,
  status: 'idle',
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const loginAsync = createAsyncThunk(
  'login/login',
  async ({ email, password }) => {
    const response = await signIn({ email, password });
    return response.headers;
  }
);

export const loginSlice = createSlice({
  name: 'login',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    setEmail: (state, action) => {
        state.email = action.payload;
    },
    setPassword: (state, action) => {
        state.password = action.payload;
    },
    logout: (state) => {
      state.email = '';
      state.password = '';
      state.accessToken = '';
      state.uid = '';
      state.client = '';
      state.isLoggedIn = false;
    }
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(loginAsync.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(loginAsync.fulfilled, (state, action) => {
        state.status = 'idle';
        state.accessToken = action.payload.accessToken;
        state.uid = action.payload.uid;
        state.client = action.payload.client;
        state.isLoggedIn = true;
      })
      .addCase(loginAsync.rejected, (state, action) => {
        state.status = 'idle';
      })
  },
});

export const { login, logout, setEmail, setPassword } = loginSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const selectEmail = (state) => state.login.email;
export const selectPassword = (state) => state.login.password;
export const selectIsSignedIn = (state) => state.login.isLoggedIn;

// We can also write thunks by hand, which may contain both sync and async logic.
// Here's an example of conditionally dispatching actions based on current state.
// export const incrementIfOdd = (amount) => (dispatch, getState) => {
//   const currentValue = selectCount(getState());
//   if (currentValue % 2 === 1) {
//     dispatch(incrementByAmount(amount));
//   }
// };

export default loginSlice.reducer;
